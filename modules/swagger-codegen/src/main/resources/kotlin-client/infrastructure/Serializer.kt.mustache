package {{packageName}}.infrastructure

import com.squareup.moshi.Moshi
import com.squareup.moshi.adapters.Rfc3339DateJsonAdapter
import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory
import java.util.*

{{#threetenbp}}
import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import org.threeten.bp.LocalDate
import org.threeten.bp.OffsetDateTime
import org.threeten.bp.format.DateTimeFormatter

class TreetenBpLocalDateJsonAdapter : JsonAdapter<LocalDate>() {
	override fun fromJson(reader: JsonReader): LocalDate? {
		val string = reader.nextString()
		return LocalDate.parse(string, DateTimeFormatter.ISO_LOCAL_DATE)
	}

	override fun toJson(writer: JsonWriter, value: LocalDate?) {
		val jsonValue = if (value != null) DateTimeFormatter.ISO_LOCAL_DATE.format(value) else null
		writer.value(jsonValue)
	}
}

class TreetenBpOffsetDateTimeJsonAdapter : JsonAdapter<OffsetDateTime>() {
	override fun fromJson(reader: JsonReader): OffsetDateTime? {
		val string = reader.nextString()
		return OffsetDateTime.parse(string, DateTimeFormatter.ISO_OFFSET_DATE_TIME)
	}

	override fun toJson(writer: JsonWriter, value: OffsetDateTime?) {
		val jsonValue = if (value != null) DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(value) else null
		writer.value(jsonValue)
	}
}
{{/threetenbp}}


object Serializer {

	@JvmStatic
	var builder: Moshi.Builder = Moshi.Builder()
		.add(KotlinJsonAdapterFactory())
		.add(Date::class.java, Rfc3339DateJsonAdapter().nullSafe())
{{#threetenbp}}
		.add(LocalDate::class.java, TreetenBpLocalDateJsonAdapter().nullSafe())
		.add(OffsetDateTime::class.java, TreetenBpOffsetDateTimeJsonAdapter().nullSafe())
{{/threetenbp}}

	@JvmStatic
	val moshi by lazy {
		builder.build()
	}
}